{"ast":null,"code":"var iconv,\n    inherits = require('util').inherits,\n    stream = require('stream');\n\nvar charsetReg = /(?:charset|encoding)\\s*=\\s*['\"]? *([\\w\\-]+)/i;\ninherits(StreamDecoder, stream.Transform);\n\nfunction StreamDecoder(charset) {\n  if (!(this instanceof StreamDecoder)) return new StreamDecoder(charset);\n  stream.Transform.call(this, charset);\n  this.charset = charset;\n  this.parsedFromChunk = false;\n}\n\nStreamDecoder.prototype._transform = function (chunk, encoding, done) {\n  var res; // try get charset from chunk, just once\n\n  if (this.charset == 'iso-8859-1' && !this.parsedFromChunk) {\n    this.parsedFromChunk = true;\n    var matchs = charsetReg.exec(chunk.toString());\n\n    if (matchs) {\n      var cs = matchs[1].toLowerCase();\n      this.charset = cs == 'utf-8' ? 'utf8' : cs;\n    }\n  }\n\n  try {\n    res = iconv.decode(chunk, this.charset);\n  } catch (e) {\n    // something went wrong, just return original chunk\n    res = chunk;\n  }\n\n  this.push(res);\n  done();\n};\n\nmodule.exports = function (charset) {\n  try {\n    if (!iconv) iconv = require('iconv-lite');\n  } catch (e) {\n    /* iconv not found */\n  }\n\n  if (iconv) return new StreamDecoder(charset);else return new stream.PassThrough();\n};","map":null,"metadata":{},"sourceType":"script"}