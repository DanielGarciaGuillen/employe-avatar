{"ast":null,"code":"var createHash = require('crypto').createHash;\n\nvar md5 = function (string) {\n  return createHash('md5').update(string).digest('hex');\n};\n\nvar basic = function (user, pass) {\n  var str = typeof pass == 'undefined' ? user : [user, pass].join(':');\n  return 'Basic ' + new Buffer(str).toString('base64');\n}; // digest logic inspired from https://github.com/simme/node-http-digest-client\n\n\nvar digest = {};\n\ndigest.parse_header = function (header) {\n  var challenge = {},\n      matches = header.match(/([a-z0-9_-]+)=\"([^\"]+)\"/gi);\n\n  for (var i = 0, l = matches.length; i < l; i++) {\n    var pos = matches[i].indexOf('='),\n        key = matches[i].substring(0, pos),\n        val = matches[i].substring(pos + 1);\n    challenge[key] = val.substring(1, val.length - 1);\n  }\n\n  return challenge;\n};\n\ndigest.update_nc = function (nc) {\n  var max = 99999999;\n  nc++;\n  if (nc > max) nc = 1;\n  var padding = new Array(8).join('0') + '';\n  nc = nc + '';\n  return padding.substr(0, 8 - nc.length) + nc;\n};\n\ndigest.generate = function (header, user, pass, method, path) {\n  var nc = 1,\n      cnonce = null,\n      challenge = digest.parse_header(header);\n  var ha1 = md5(user + ':' + challenge.realm + ':' + pass),\n      ha2 = md5(method + ':' + path),\n      resp = [ha1, challenge.nonce];\n\n  if (typeof challenge.qop === 'string') {\n    cnonce = md5(Math.random().toString(36)).substr(0, 8);\n    nc = digest.update_nc(nc);\n    resp = resp.concat(nc, cnonce);\n  }\n\n  resp = resp.concat(challenge.qop, ha2);\n  var params = {\n    username: user,\n    realm: challenge.realm,\n    nonce: challenge.nonce,\n    uri: path,\n    qop: challenge.qop,\n    response: md5(resp.join(':')) //  if (challenge.opaque) {\n    //    params.opaque = challenge.opaque;\n    //  }\n\n  };\n\n  if (cnonce) {\n    params.nc = nc;\n    params.cnonce = cnonce;\n  }\n\n  header = [];\n\n  for (var k in params) header.push(k + '=\"' + params[k] + '\"');\n\n  return 'Digest ' + header.join(', ');\n};\n\nmodule.exports = {\n  basic: basic,\n  digest: digest.generate\n};","map":null,"metadata":{},"sourceType":"script"}