{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\n\nvar util = require('util');\n\nvar _ = require('lodash');\n\nvar Promise = require('bluebird');\n\nvar createError = require('create-error');\n\nvar http = require('http');\n\nvar needle = Promise.promisifyAll(require('needle'));\n\nvar pkg = require('../package.json');\n\nfunction ClearbitClient(config) {\n  config = config || {};\n  assert(this instanceof ClearbitClient, 'Client must be called with new');\n  this.key = config.key || process.env.CLEARBIT_KEY;\n  assert(!!this.key, 'An API key must be provided');\n  this.Company = require('./enrichment/company').Company(this);\n  this.Person = require('./enrichment/person').Person(this);\n  this.Enrichment = require('./enrichment').Enrichment(this);\n  this.Discovery = require('./discovery').Discovery(this);\n  this.Prospector = require('./prospector').Prospector(this);\n  this.Reveal = require('./reveal').Reveal(this);\n  this.Risk = require('./risk').Risk(this);\n  this.NameToDomain = require('./name_to_domain').NameToDomain(this);\n  this.Watchlist = require('./watchlist').Watchlist(this);\n  this.WatchlistCandidate = require('./watchlist').WatchlistCandidate(this);\n  this.WatchlistEntity = require('./watchlist').WatchlistEntity(this);\n  this.WatchlistIndividual = require('./watchlist').WatchlistIndividual(this);\n}\n\nvar ENDPOINT = 'https://%s%s.clearbit.com/v%s';\n\nClearbitClient.prototype.endpoint = function (options) {\n  options = _.defaults(options, {\n    version: '1',\n    stream: false\n  });\n  assert(options.api, 'An API must be specified');\n  return util.format(ENDPOINT, options.api, options.stream ? '-stream' : '', options.version);\n};\n\nClearbitClient.prototype.url = function (options) {\n  _.defaults(options, {\n    path: ''\n  });\n\n  return this.endpoint(options) + options.path;\n};\n\nClearbitClient.prototype.request = function (options) {\n  options = _.defaults(options, {\n    method: 'get'\n  });\n  var timeout = options.timeout || options.stream && 60000 || 10000;\n  return needle.requestAsync(options.method, this.url(options), options.body || options.query, {\n    json: options.json,\n    headers: options.headers,\n    timeout: timeout,\n    username: this.key,\n    password: '',\n    user_agent: 'ClearbitNode/v' + pkg.version\n  }).bind(this).spread(function (response, body) {\n    if (response.statusCode === 202 || response.statusCode >= 400) {\n      var message = body.error ? body.error.message : http.STATUS_CODES[response.statusCode] || 'Unknown';\n      throw _.extend(new this.ClearbitError(message), {\n        type: body.error ? body.error.type : 'unknown',\n        body: body,\n        statusCode: response.statusCode\n      });\n    } else {\n      return body;\n    }\n  });\n};\n\nClearbitClient.ClearbitError = ClearbitClient.prototype.ClearbitError = createError('ClearbitError');\nmodule.exports = ClearbitClient;","map":null,"metadata":{},"sourceType":"script"}