{"ast":null,"code":"'use strict';\n\nvar createError = require('create-error');\n\nvar _ = require('lodash');\n\nfunction ClearbitResource(data) {\n  this.options = {};\n\n  _.extend(this, data);\n}\n\nClearbitResource.get = function (path, options) {\n  options = _.extend({\n    path: path,\n    method: 'get',\n    query: extractParams(options)\n  }, this.options, options);\n  return this.client.request(options).bind(this).then(cast).catch(isQueued, function () {\n    throw new this.QueuedError(this.name + ' lookup queued');\n  }).catch(isUnknownRecord, function () {\n    throw new this.NotFoundError(this.name + ' not found');\n  });\n};\n\nClearbitResource.post = function (path, options) {\n  options = _.extend({\n    path: path,\n    method: 'post',\n    json: true,\n    body: extractParams(options)\n  }, this.options, options);\n  return this.client.request(options).bind(this).then(cast).catch(isUnknownRecord, function () {\n    throw new this.NotFoundError(this.name + ' not found');\n  });\n};\n\nClearbitResource.del = function (path, options) {\n  options = _.extend({\n    path: path,\n    method: 'delete'\n  }, this.options, options);\n  return this.client.request(options).bind(this).then(cast).catch(isUnknownRecord, function () {\n    throw new this.NotFoundError(this.name + ' not found');\n  });\n};\n\nClearbitResource.setVersion = function (value) {\n  this.options.headers = this.options.headers || {};\n  this.options.headers['API-Version'] = value;\n};\n\nexports.create = function (name, options) {\n  var Resource = function () {\n    ClearbitResource.apply(this, arguments);\n  };\n\n  _.extend(Resource, ClearbitResource, createErrors(name), {\n    name: name,\n    options: options\n  });\n\n  return _.extend(function (client) {\n    return _.extend(Resource, {\n      client: client\n    });\n  }, {\n    extend: function (proto, ctor) {\n      _.extend(Resource.prototype, proto);\n\n      _.extend(Resource, ctor);\n\n      return this;\n    }\n  });\n};\n\nfunction cast(data) {\n  /* jshint validthis:true */\n  return !Array.isArray(data) ? new this(data) : data.map(function (result) {\n    return new this(result);\n  }, this);\n}\n\nfunction isQueued(err) {\n  return err.type === 'queued';\n}\n\nfunction isUnknownRecord(err) {\n  return err.type === 'unknown_record';\n}\n\nfunction createErrors(name) {\n  return {\n    NotFoundError: createError(name + 'NotFoundError'),\n    QueuedError: createError(name + 'QueuedError')\n  };\n}\n\nfunction extractParams(options) {\n  var params = _.omit(options || {}, 'path', 'method', 'params', 'client', 'api', 'stream', 'headers', 'timeout');\n\n  return _.isEmpty(params) ? null : params;\n}","map":null,"metadata":{},"sourceType":"script"}